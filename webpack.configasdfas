const path = require('path');
const glob = require('glob');
const fs = require('fs');
const transformer = require('./trans').default;

const entryPoints = () => {
  const entries = {};
  const files = glob.sync(path.resolve(__dirname, './src/*.ts'));

  files.forEach((file) => {
    const content = fs.readFileSync(file, 'utf8');
    const regex = /\/\*[\s\S]*?@YugObject[\s\S]*?\*\//;
    const hasYugObject = regex.test(content);

    if (hasYugObject) {
      const name = path.basename(file, '.ts');
      entries[name] = file;
    }
  });

  return entries;
};

const YugTransformer = (program, options) => {
  console.log("Transformer Called");
  return transformer;
};


module.exports = {
  entry: entryPoints(),
  devtool: 'inline-source-map',
  module: {
    rules: [
      {
        test: /\.(ts|tsx)$/,
        exclude: /node_modules/,                                  // Can be removed
        loader: require.resolve('ts-loader'),
        options: {
          getCustomTransformers: program => {
            before: [YugTransformer(program, { customConfig: true })]
            after: []
          }
        }
      }
    ],
  },
  resolve: {
    extensions: ['.tsx', '.ts', '.js'],
  },
  output: {
    filename: '[name].js',
    path: path.resolve(__dirname, 'dist'),
  },
};

